// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUsersStatuses(ctx context.Context, in *GetUsersStatusesRequest, opts ...grpc.CallOption) (*GetUserStatusesResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/mm.Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUsersStatuses(ctx context.Context, in *GetUsersStatusesRequest, opts ...grpc.CallOption) (*GetUserStatusesResponse, error) {
	out := new(GetUserStatusesResponse)
	err := c.cc.Invoke(ctx, "/mm.Users/GetUsersStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUsersStatuses(context.Context, *GetUsersStatusesRequest) (*GetUserStatusesResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) GetUsersStatuses(context.Context, *GetUsersStatusesRequest) (*GetUserStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersStatuses not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mm.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUsersStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUsersStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mm.Users/GetUsersStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUsersStatuses(ctx, req.(*GetUsersStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mm.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "GetUsersStatuses",
			Handler:    _Users_GetUsersStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mm/mm.proto",
}

// ChannelsClient is the client API for Channels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelsClient interface {
	CreateClientChannel(ctx context.Context, in *CreateClientChannelRequest, opts ...grpc.CallOption) (*CreateClientChannelResponse, error)
}

type channelsClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelsClient(cc grpc.ClientConnInterface) ChannelsClient {
	return &channelsClient{cc}
}

func (c *channelsClient) CreateClientChannel(ctx context.Context, in *CreateClientChannelRequest, opts ...grpc.CallOption) (*CreateClientChannelResponse, error) {
	out := new(CreateClientChannelResponse)
	err := c.cc.Invoke(ctx, "/mm.Channels/CreateClientChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelsServer is the server API for Channels service.
// All implementations must embed UnimplementedChannelsServer
// for forward compatibility
type ChannelsServer interface {
	CreateClientChannel(context.Context, *CreateClientChannelRequest) (*CreateClientChannelResponse, error)
	mustEmbedUnimplementedChannelsServer()
}

// UnimplementedChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedChannelsServer struct {
}

func (UnimplementedChannelsServer) CreateClientChannel(context.Context, *CreateClientChannelRequest) (*CreateClientChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientChannel not implemented")
}
func (UnimplementedChannelsServer) mustEmbedUnimplementedChannelsServer() {}

// UnsafeChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelsServer will
// result in compilation errors.
type UnsafeChannelsServer interface {
	mustEmbedUnimplementedChannelsServer()
}

func RegisterChannelsServer(s grpc.ServiceRegistrar, srv ChannelsServer) {
	s.RegisterService(&_Channels_serviceDesc, srv)
}

func _Channels_CreateClientChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelsServer).CreateClientChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mm.Channels/CreateClientChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelsServer).CreateClientChannel(ctx, req.(*CreateClientChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Channels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mm.Channels",
	HandlerType: (*ChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClientChannel",
			Handler:    _Channels_CreateClientChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mm/mm.proto",
}

// PostsClient is the client API for Posts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsClient interface {
}

type postsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsClient(cc grpc.ClientConnInterface) PostsClient {
	return &postsClient{cc}
}

// PostsServer is the server API for Posts service.
// All implementations must embed UnimplementedPostsServer
// for forward compatibility
type PostsServer interface {
	mustEmbedUnimplementedPostsServer()
}

// UnimplementedPostsServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServer struct {
}

func (UnimplementedPostsServer) mustEmbedUnimplementedPostsServer() {}

// UnsafePostsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServer will
// result in compilation errors.
type UnsafePostsServer interface {
	mustEmbedUnimplementedPostsServer()
}

func RegisterPostsServer(s grpc.ServiceRegistrar, srv PostsServer) {
	s.RegisterService(&_Posts_serviceDesc, srv)
}

var _Posts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mm.Posts",
	HandlerType: (*PostsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/mm/mm.proto",
}
