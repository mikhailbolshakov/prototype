// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServicesClient is the client API for UserServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServicesClient interface {
	Add(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*UserBalance, error)
	WriteOff(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error)
	Lock(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error)
	DeliveryService(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*Delivery, error)
}

type userServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServicesClient(cc grpc.ClientConnInterface) UserServicesClient {
	return &userServicesClient{cc}
}

func (c *userServicesClient) Add(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/services.UserServices/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/services.UserServices/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) WriteOff(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/services.UserServices/WriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) Lock(ctx context.Context, in *ChangeServicesRequest, opts ...grpc.CallOption) (*UserBalance, error) {
	out := new(UserBalance)
	err := c.cc.Invoke(ctx, "/services.UserServices/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) DeliveryService(ctx context.Context, in *DeliveryRequest, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := c.cc.Invoke(ctx, "/services.UserServices/DeliveryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServicesServer is the server API for UserServices service.
// All implementations must embed UnimplementedUserServicesServer
// for forward compatibility
type UserServicesServer interface {
	Add(context.Context, *ChangeServicesRequest) (*UserBalance, error)
	GetBalance(context.Context, *GetBalanceRequest) (*UserBalance, error)
	WriteOff(context.Context, *ChangeServicesRequest) (*UserBalance, error)
	Lock(context.Context, *ChangeServicesRequest) (*UserBalance, error)
	DeliveryService(context.Context, *DeliveryRequest) (*Delivery, error)
	mustEmbedUnimplementedUserServicesServer()
}

// UnimplementedUserServicesServer must be embedded to have forward compatible implementations.
type UnimplementedUserServicesServer struct {
}

func (UnimplementedUserServicesServer) Add(context.Context, *ChangeServicesRequest) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUserServicesServer) GetBalance(context.Context, *GetBalanceRequest) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedUserServicesServer) WriteOff(context.Context, *ChangeServicesRequest) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteOff not implemented")
}
func (UnimplementedUserServicesServer) Lock(context.Context, *ChangeServicesRequest) (*UserBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedUserServicesServer) DeliveryService(context.Context, *DeliveryRequest) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliveryService not implemented")
}
func (UnimplementedUserServicesServer) mustEmbedUnimplementedUserServicesServer() {}

// UnsafeUserServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServicesServer will
// result in compilation errors.
type UnsafeUserServicesServer interface {
	mustEmbedUnimplementedUserServicesServer()
}

func RegisterUserServicesServer(s grpc.ServiceRegistrar, srv UserServicesServer) {
	s.RegisterService(&_UserServices_serviceDesc, srv)
}

func _UserServices_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserServices/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).Add(ctx, req.(*ChangeServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserServices/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_WriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).WriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserServices/WriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).WriteOff(ctx, req.(*ChangeServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserServices/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).Lock(ctx, req.(*ChangeServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_DeliveryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).DeliveryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UserServices/DeliveryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).DeliveryService(ctx, req.(*DeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.UserServices",
	HandlerType: (*UserServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UserServices_Add_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _UserServices_GetBalance_Handler,
		},
		{
			MethodName: "WriteOff",
			Handler:    _UserServices_WriteOff_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _UserServices_Lock_Handler,
		},
		{
			MethodName: "DeliveryService",
			Handler:    _UserServices_DeliveryService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/services.proto",
}
