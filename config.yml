redis:
  port: 6379
  host: localhost
  password: ${REDIS_PASSWORD|}
  ttl: 7200

zeebe:
  port: 26500
  host: localhost

keycloak:
  url: "http://localhost:8086"
  admin-username: admin
  admin-password: ${KK_ADMIN_PASSWORD|admin}
  client-id: app
  client-secret: "d6dbae97-8570-4758-a081-9077b7899a7d"
  client-realm: prototype

mattermost:
  url: "http://localhost:8065"
  ws: "ws://localhost:8065"
  admin-username: admin
  admin-password: ${MM_ADMIN_PASSWORD|admin}
  admin-access-token: ${MM_BOT_ACCESS_TOKEN|oj9hp7iqyfrztxj9qah3u8n8we}
  team: rgs
  default-password: ${MM_DEFAULT_PASSWORD|12345}
  bot-username: bot.rgs
  bot-access-token: ${MM_BOT_ACCESS_TOKEN|jg88x5sb63yk8ng6kcfkb37iho}

http:
  host: localhost
  port: 8000
  tls:
    cert: ""
    key: ""

es:
  url: "http://localhost:9200"
  trace: false

nats:
  url: "nats://127.0.0.1:4222"
  clusterId: "test-cluster"

etcd:
  hosts:
    - "localhost:2379"

webrtc:

  coordinator:
    local:
      enabled: false
    etcd:
      enabled: true

  signal:
    fqdn: localhost
    httpaddr: "localhost:7000"
    key: ""
    cert: ""
    auth:
      enabled: false
      keytype: HMAC
      key: 1q2dGu5pzikcrECJgW3ADfXX3EsmoD99SYvSVCpDsJrAqxou5tUNbHPvkEFI4bTS

  sfu:
    # Ballast size in MiB, will allocate memory to reduce the GC trigger upto 2x the
    # size of ballast. Be aware that the ballast should be less than the half of memory available
    ballast: 0
    router:
      # Limit the remb bandwidth in kbps
      # zero means no limits
      maxbandwidth: 1500
      # max buffer time by ms for video tracks
      maxbuffertime: 1000
      simulcast:
        # Prefer best quality initially
        bestqualityfirst: true

    webrtc:
      # Range of ports that ion accepts WebRTC traffic on
      # Format: [min, max]   and max - min >= 100
      # portrange:
      #   - 50000
      #   - 60000
      # if sfu behind nat, set iceserver
      iceservers:
        -
          urls:
            - "stun:stun.stunprotocol.org:3478"
        -
          urls:
            - "turn:turn.awsome.org:3478"
          username: "awsome"
          credential: "awsome"

      # sdp semantics:
      # "unified-plan"
      # "plan-b"
      # "unified-plan-with-fallback"
      sdpsemantics: "unified-plan"

      log:
        stats: true
        level: debug
        fix:
          - "proc.go"
          - "asm_amd64.s"
          - "jsonrpc2.go"

  #candidates:
  # In case you're deploying ion-sfu on a server which is configured with
  # a 1:1 NAT (e.g., Amazon EC2), you might want to also specify the public
  # address of the machine using the setting below. This will result in
  # all host candidates (which normally have a private IP address) to
  # be rewritten with the public address provided in the settings. As
  # such, use the option with caution and only if you know what you're doing.
  # Multiple public IP addresses can be specified as a comma separated list
  # if the sfu is deployed in a DMZ between two 1-1 NAT for internal and
  # external users.
  # nat1to1:
  #   - "1.2.3.4"
  # icelite: true

services:
  chat:
    database:
      dbname: mattermost
      user: chat
      password: ${DB_CHAT_PASSWORD|chat}
      port: 5432
      # read-write host
      host-rw: localhost
      # read-only host
      host-ro: localhost
    grpc:
      port: 50053
      host: localhost
  users:
    database:
      dbname: mattermost
      user: users
      password: ${DB_USERS_PASSWORD|users}
      port: 5432
      # read-write host
      host-rw: localhost
      # read-only host
      host-ro: localhost
    grpc:
      port: 50051
      host: localhost
  tasks:
    database:
      dbname: mattermost
      user: tasks
      password: ${DB_TASKS_PASSWORD|tasks}
      port: 5432
      # read-write host
      host-rw: localhost
      # read-only host
      host-ro: localhost
    grpc:
      port: 50052
      host: localhost
  services:
    database:
      dbname: mattermost
      user: services
      password: ${DB_SERVICES_PASSWORD|services}
      port: 5432
      # read-write host
      host-rw: localhost
      # read-only host
      host-ro: localhost
    grpc:
      port: 50054
      host: localhost
  bp:
    grpc:
      port: 50055
      host: localhost
  cfg:
    grpc:
      port: 50056
      host: localhost
  webrtc:
    database:
      dbname: mattermost
      user: webrtc
      password: ${DB_SERVICES_PASSWORD|webrtc}
      port: 5432
      # read-write host
      host-rw: localhost
      # read-only host
      host-ro: localhost



